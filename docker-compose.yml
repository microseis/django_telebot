
services:
  app:
    container_name: django-admin
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    volumes:
      - ./src:/var/www/app/src
      - ./tests:/var/www/app/tests
      - ./src/static:/var/www/static
    env_file:
      - docker.env
    ports:
      - "8000:8000"
    networks:
      - my_network
    depends_on:
      - db
  
  bot:
    container_name: django-bot
    build:
      context: .
      dockerfile: DockerfileTelegram
    restart: unless-stopped
    volumes:
      - ./src:/var/www/app/src
      - ./tests:/var/www/app/tests
    env_file:
      - docker.env
    networks:
      - my_network
    depends_on:
      - db

  nginx:
    container_name: django-bot-nginx
    image: nginx:latest
    restart: unless-stopped
    ports:
      - "80:80"
    env_file:
      - docker.env
    volumes:
      - ./config/nginx/default.conf:/etc/nginx/nginx.conf
      - ./src/static:/var/www/static
    networks:
      - my_network
    depends_on:
      - db

  db:
    image: postgres:15
    container_name: django-bot-db
    environment:
      - POSTGRES_USER=${DB_USER:-user}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-password}
      - POSTGRES_DB=${DB_NAME:-db_name}
    env_file:
      - docker.env
    volumes:
      - ./db:/var/lib/postgresql/data/
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - my_network

networks:
  my_network:
    driver: bridge